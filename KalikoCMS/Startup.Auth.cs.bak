// This file is typically named Startup.Auth.cs and resides in your project's root or App_Start folder.
// Ensure the namespace matches your Startup.cs file (KalikoCMS).

using AspNet.Identity.DataAccess.Data; // Needed for DataContext
// IMPORTANT: These using statements should align with your project structure.
// Based on your IdentityConfig.cs, the core Identity classes (ApplicationUser/IdentityUser,
// ApplicationDbContext/DataContext, UserManager, SignInManager, RoleManager)
// are either directly in KalikoCMS namespace or come from AspNet.Identity.DataAccess.
// The line 'using KalikoCMS.Models;' is removed as it's not applicable here.

using Microsoft.AspNet.Identity; // Needed for DefaultAuthenticationTypes, IdentityRole
using Microsoft.AspNet.Identity.Owin; // Needed for context.GetUserManager<T>
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using Microsoft.Owin;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Owin;
using System; // For InvalidOperationException
using System.Collections.Generic; // For List<Claim>
using System.Configuration; // For reading web.config appSettings
using System.Security.Claims;
using System.Threading.Tasks;
// If your 'IdentityUser' is from a specific KalikoCMS.Identity.Models or similar,
// you might need a using statement for that. Given your IdentityConfig.cs,
// IdentityUser is resolved from Microsoft.AspNet.Identity (via KalikoCMS.Identity).

namespace KalikoCMS
{
    public partial class Startup // This must be a 'partial' class matching your Startup.cs
    {
        // Azure AD Configuration from web.config appSettings
        private static string clientId = ConfigurationManager.AppSettings["ida:ClientId"];
        private static string appKey = ConfigurationManager.AppSettings["ida:ClientSecret"];
        private static string aadInstance = ConfigurationManager.AppSettings["ida:AADInstance"];
        private static string tenant = ConfigurationManager.AppSettings["ida:Tenant"];
        private static string postLogoutRedirectUri = ConfigurationManager.AppSettings["ida:PostLogoutRedirectUri"];

        public void ConfigureAuth(IAppBuilder app)
        {
            // Configure the ASP.NET Identity database context, user manager, sign-in manager, and role manager
            // to use a single instance per request.

            // 1. Configure the DataContext
            // Since DataContext from AspNet.Identity.DataAccess.Data typically doesn't have a static Create method
            // like ApplicationDbContext from Microsoft.AspNet.Identity.EntityFramework,
            // you might need to configure it differently or ensure it's provided via dependency injection
            // to the Identity stores. If DataContext *does* have a parameterless constructor, this will work.
            // If DataContext requires a connection string or options, you'd need to adjust how it's created.
            // Assuming DataContext has a parameterless constructor or is handled internally by AspNet.Identity.DataAccess.
            app.CreatePerOwinContext(DataContext.Create); // <-- Changed from ApplicationDbContext.Create

            app.CreatePerOwinContext<ApplicationUserManager>(ApplicationUserManager.Create);
            app.CreatePerOwinContext<ApplicationSignInManager>(ApplicationSignInManager.Create);
            app.CreatePerOwinContext<ApplicationRoleManager>(ApplicationRoleManager.Create);

            // Enable the application to use a cookie to store information for the signed-in user
            // This is the primary authentication middleware for your application's local session.
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
                LoginPath = new PathString("/Admin/Login.aspx"),
                Provider = new CookieAuthenticationProvider
                {
                    OnValidateIdentity = SecurityStampValidator.OnValidateIdentity<IdentityUser, Guid>( // <-- Changed from ApplicationUser to IdentityUser
                        validateInterval: TimeSpan.FromMinutes(30),
                        regenerateIdentity: (manager, user) => user.GenerateUserIdentityAsync((ApplicationUserManager)manager)) // Cast manager to ApplicationUserManager
                }
            });

            // Enable the application to use OpenID Connect for Azure AD authentication
            app.UseOpenIdConnectAuthentication(
                new OpenIdConnectAuthenticationOptions
                {
                    ClientId = clientId,
                    Authority = aadInstance + tenant,
                    PostLogoutRedirectUri = postLogoutRedirectUri,
                    RedirectUri = postLogoutRedirectUri,
                    ResponseType = OpenIdConnectResponseType.IdToken,

                    Scope = "openid profile",

                    TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
                    {
                        ValidateIssuer = false // Set to true in production AFTER you confirm the exact issuer URL from AAD's metadata endpoint.
                    },

                    Notifications = new OpenIdConnectAuthenticationNotifications
                    {
                        SecurityTokenValidated = async (context) =>
                        {
                            string userEmail = context.AuthenticationTicket.Identity.FindFirst(ClaimTypes.Upn)?.Value;
                            if (string.IsNullOrEmpty(userEmail))
                            {
                                userEmail = context.AuthenticationTicket.Identity.FindFirst("preferred_username")?.Value;
                            }

                            if (string.IsNullOrEmpty(userEmail))
                            {
                                context.HandleResponse();
                                context.Response.Redirect("/Error?message=User email claim missing from Azure AD token.");
                                return;
                            }

                            // Get the ASP.NET Identity User Manager and Role Manager from the OWIN context
                            var userManager = context.OwinContext.GetUserManager<ApplicationUserManager>();
                            var roleManager = context.OwinContext.GetUserManager<ApplicationRoleManager>();

                            if (userManager == null || roleManager == null)
                            {
                                throw new InvalidOperationException("ASP.NET Identity User/Role Managers not correctly registered or retrieved from OWIN context.");
                            }

                            // 1. Find the user in your KalikoCMS local ASP.NET Identity store
                            // Using IdentityUser directly as per your IdentityConfig.cs
                            var user = await userManager.FindByNameAsync(userEmail);

                            if (user == null)
                            {
                                // 2. If the user doesn't exist, create them.
                                // Using IdentityUser directly
                                user = new IdentityUser { UserName = userEmail, Email = userEmail };
                                var createResult = await userManager.CreateAsync(user, Guid.NewGuid().ToString()); // Use a strong, random dummy password
                                if (!createResult.Succeeded)
                                {
                                    context.HandleResponse();
                                    context.Response.Redirect("/Error?message=Failed to create CMS user: " + string.Join("; ", createResult.Errors));
                                    return;
                                }
                            }

                            // 3. Ensure the "WebAdmin" role exists in your KalikoCMS Identity store
                            if (!await roleManager.RoleExistsAsync("WebAdmin"))
                            {
                                var roleResult = await roleManager.CreateAsync(new IdentityRole("WebAdmin"));
                                if (!roleResult.Succeeded)
                                {
                                    context.HandleResponse();
                                    context.Response.Redirect("/Error?message=Failed to create 'WebAdmin' role: " + string.Join("; ", roleResult.Errors));
                                    return;
                                }
                            }

                            // 4. Assign the "WebAdmin" role to the user if they don't already have it
                            if (!await userManager.IsInRoleAsync(user.Id, "WebAdmin"))
                            {
                                var addRoleResult = await userManager.AddToRoleAsync(user.Id, "WebAdmin");
                                if (!addRoleResult.Succeeded)
                                {
                                    context.HandleResponse();
                                    context.Response.Redirect("/Error?message=Failed to add user to 'WebAdmin' role: " + string.Join("; ", addRoleResult.Errors));
                                    return;
                                }
                            }

                            // 5. Sign the user into the local application cookie.
                            var signInManager = context.OwinContext.Get<ApplicationSignInManager>();
                            await signInManager.SignInAsync(user, context.AuthenticationTicket.Properties.IsPersistent, isOidcLogin: true);

                            await Task.FromResult(0);
                        },

                        RedirectToIdentityProvider = (context) =>
                        {
                            if (context.ProtocolMessage.RequestType == OpenIdConnectRequestType.Logout)
                            {
                                var signoutCallbackUrl = context.Request.Uri.GetLeftPart(UriPartial.Authority) + postLogoutRedirectUri;
                                context.ProtocolMessage.PostLogoutRedirectUri = signoutCallbackUrl;
                            }
                            return Task.FromResult(0);
                        },

                        AuthenticationFailed = (context) =>
                        {
                            System.Diagnostics.Trace.TraceError($"Azure AD authentication failed: {context.Exception.Message}");
                            context.HandleResponse();
                            context.Response.Redirect("/Error?message=" + Uri.EscapeDataString("Authentication failed: " + context.Exception.Message));
                            return Task.FromResult(0);
                        }
                    }
                });
        }
    }
}